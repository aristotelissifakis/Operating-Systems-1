Άσκηση 1

Εκφώνηση:
Να γραφτεί script με το όνομα searching το οποίο (α) να δέχεται ως ορίσματα δύο ακεραίους αριθμούς και (β) να ζητάει από το χρήστη το όνομα ενός καταλόγου, και με βάση αυτά να εμφανίζει στην οθόνη τα ακόλουθα (τα 1-3 με χρήση της εντολής find και τα 4-5 με συνδυασμό των εντολών ls και grep):
1. Τα αρχεία του δέντρου του δοθέντος καταλόγου με εξουσιοδοτήσεις (permissions) τον πρώτο αριθμό (όρισμα) θεωρώντας τον ως οκταδικό ισοδύναμο.
2. Τα αρχεία του δέντρου του δοθέντος καταλόγου που άλλαξαν (modify) περιεχόμενα κατά τις ‘x’ τελευταίες μέρες, όπου ‘x’ ο δεύτερος αριθμός (όρισμα).
3. Τους υποκαταλόγους του δέντρου του δοθέντος καταλόγου που προσπελάστηκαν (access) κατά τις ‘x’ τελευταίες μέρες, όπου ‘x’ ο δεύτερος αριθμός (όρισμα).
4. Τα αρχεία του δοθέντος καταλόγου στα οποία έχουν δικαίωμα ανάγνωσης όλοι οι χρήστες.
5. Τους υποκαταλόγους του δοθέντος καταλόγου στους οποίους έχουν δικαίωμα αλλαγών (create/rename/delete files) εκτός από τον ιδιοκτήτη και άλλοι χρήστες του συστήματος.
Πριν από τον εκτύπωση κάθε λίστας από τις παραπάνω (1 έως 5) να τυπώνεται κατάλληλη επικεφαλίδα η οποία να αναφέρει μεταξύ άλλων και τον αριθμό των αρχείων (ή υποκαταλόγων) που πρόκειται να τυπωθούν. Το script να εκτελείται επαναληπτικά όσο επιθυμεί ο χρήστης (για διαφορετικούς καταλόγους) και στο τέλος (πριν την τελική έξοδο) να εμφανίζει αθροιστικά το συνολικό αριθμό των ευρεθέντων (αρχείων / υποκαταλόγων) κάθε περίπτωσης (από τις 1 έως 6) για όλους τους καταλόγους στους οποίους έψαξε.

Απάντηση:
#! /bin/bash

continueInput=1
let nOne=0
let nTwo=0
let nThree=0
let nFour=0
let nFive=0
let nSix=0

if [ $# -ne 2 ]; then
        echo "there need to be at least two parameters for this to run"
	exit 1
else
        octal=$1
fi

while [ $continueInput -ne 0 ]
do

read -p "Insert a directory name: " directory

#1.1
echo "The files with permissions $octal are: "
command=($(find $directory -type f -perm $octal))
echo $command
nOne=$(($nOne+${#command[@]}))

#1.2
echo ""
echo "The files that have been modified in the last $2 days are: "
command=($(find $directory -type f -mtime -$2))
echo $command
nTwo=$(($nTwo+${#command[@]}))

#1.3
echo ""
echo "The directories that have been accessed in the last $2 days are: "
command=($(find $directory -mindepth 1 -type d -atime -$2))
echo $command
nThree=$(($nThree+${#command[@]}))

#1.4
echo ""
echo "The files in the selected directory which all users can read are: "
ls -l $directory | grep "^.r..r..r"
nFour=$(ls -l $directory | grep "^.r..r..r" | wc -l)

#1.5
echo ""
echo "The subdirectories of the selected directory which all users can edit are: "
ls -l $directory | grep "^d.w..w..w."
nFive=$(ls -l $directory | grep "^d.w..w..w." | wc -l)

read -p "Do you want to repeat this process with another directory? (Type 0 to exit) " continueInput
done
echo "The amount of files found by the first command is $nOne"
echo "The amount of files found by the second command is $nTwo"
echo "The amount of directories found by the third command is $nThree"
echo "The amount of files found by the fourth command is $nFour"
echo "The amount of directories found by the fifth command is $nFive"

Εξήγηση
Αρχικά δημιουργούμε τις απαραίτητες μεταβλητές για την συνέχεια του προγραμμάτος και για την μέτρηση του πλήθους των αποτελεσμάτων.
Έπειτα ελέγχουμε αν το πλήθος των παραμέτρων είναι 2. Αν είναι τότε θέτουμε τον πρώτο αριθμό σε μια μεταβλητή για τον οκταδικό αριθμό. Αν δεν είναι τυπώνουμε τις κατάλληλες οδηγίες και τελειώνουμε το script.
Μετά ξεκινάμε ένα loop που τελειώνει όταν ο χρήστης εισάγει 0 σε επιλογή αργότερα.
Στην συνέχεια διαβάζουμε τον φάκελο από το πληκτρολόγιο και το αποθηκεύουμε στην μεταβλητή directory.
Στο #1.1 χρησιμοποιούμε την εντολή find με δείκτες -type f για την αναζήτηση μόνο αρχείων και -perm #number (στον κώδικα είναι $octal η μεταβλητή αλλά έτσι είναι πιο ευανάγνωστο για την εξήγηση) για την αναζήτηση αρχείων με τα κατάλληλα permissions. Επίσης βάζουμε το αποτέλεσμα της εντολής σε ένα array και μετράμε τις γραμμές της με την εντολή #command[@], προσθέτουμε το αποτέλεσμα στο συνολικό πλήθος της εντολής.
Στο #1.2 χρησιμοποιούμε την εντολή find με δείκτες -type f για την αναζήτηση μόνο αρχείων και -mtime #number για την αναζήτηση (για access) τις προηγούμενες #number μέρες. Επίσης βάζουμε το αποτέλεσμα της εντολής σε ένα array και μετράμε τις γραμμές της με την εντολή #command[@], προσθέτουμε το αποτέλεσμα στο συνολικό πλήθος της εντολής.
Στο #1.3 χρησιμοποιούμε την εντολή find με δείκτες -mindepth 1 για να μην ψάξουμε τους υποφακέλους, -type d για την αναζήτηση μόνο φακέλων και -atime #number για να αναζητήσουμε φακέλους που έχουν επεξεργαστεί εντός #number ημερών. Επίσης βάζουμε το αποτέλεσμα της εντολής σε ένα array και μετράμε τις γραμμές της με την εντολή #command[@], προσθέτουμε το αποτέλεσμα στο συνολικό πλήθος της εντολής.
Στο #1.4 χρησιμοποιούμε την εντολή grep με παράμετρο "^.r..r..r" στην εντολή ls -l (με σωλήνωση) για να δούμε ποιά αρχεία και φάκελοι έχουν τα permissions που έχουμε δώσει. Στην συνέχεια εκτελούμε την εντολή ξανά και αυτή την φορά μετράμε το πλήθος των γραμμών στην έξοδο με την εντολή wc -l και τις προσθέτουμε στο πλήθος της εντολής.
Στο #1.5 χρησιμοποιούμε την εντολή grep με παράμετρο "^d.w..w..w." στην εντολή ls -l (που δείχνει λεπτομέρειες για τον φάκελο) #directory για την αναζήτηση φακέλων που έχουν τα permissions που έχουμε δώσει. Στην συνέχεια εκτελούμε την εντολή ξανά και αυτή την φορά μετράμε το πλήθος των γραμμών στην έξοδο με την εντολή wc -l και τις προσθέτουμε στο πλήθος της εντολής.
Τέλος ελέγχουμε αν ο χρήστης θέλει να ξανα εκτελέσει το script. Αν δεν θέλει τυπώνουμε τα πλήθοι των αποτελεσμάτων των εντολών που εκτελέστηκαν.


Άσκηση 2

Εκφώνηση
Σε μια εφαρμογή χρειάζεται να δημιουργούμε νέους καταλόγους τους οποίους θα βρίσκει και θα χρησιμοποιεί. Γράψτε ένα script με όνομα createpvs το οποίο θα καλείται με παραμέτρους ROOTFOLDER, no_of_DBFOLDERS, no_of_DATAFOLDERS, USERNAME π.χ.
createpvs /etc/data 0 5 user555
το οποίο θα κάνει τα ακόλουθα:
• Θα ελέγχει τον αριθμό των ορισμάτων ώστε να είναι 4
• Θα ελέγχει αν υπάρχει ο ROOTFOLDER μέσα στον οποίο θα δημιουργηθούν οι νέοι κατάλογοι
• Θα ελέγχει αν υπάρχει ο χρήστης USERNAME (μέσα στο αρχείο /etc/passwd)
• Αν όλοι οι έλεγχοι είναι επιτυχείς,
- Θα δημιουργεί τόσους υποφακέλους με όνομα dbfolderΝ μέσα στον ROOTFOLDER όσους υποδεικνύει το νούμερο no_of_DBFOLDERS και με τέτοιο τρόπο ώστε να μην κάνει “overwrite” υφιστάμενους φακέλους. Π.χ. αν ο τελευταίος φάκελος που είχε δημιουργηθεί από προηγούμενη εκτέλεση είναι ο dbfolder18 και θέλουμε 6 νέους, θα πρέπει να δημιουργήσει τους dbfolder19, dbfolder20,…,dbfolder24 (αν η παράμετρος είναι 0 δεν θα πρέπει να δημιουργήσει κανέναν).
- To ίδιο θα πρέπει να ισχύει (δηλαδή να δημιουργούνται χωρίς “overwrite”) και για τους υποφακέλους datafolderN που καθορίζονται από το no_of_DATAFOLDERS.
- Μετά την δημιουργία των φακέλων, θα χρησιμοποιεί την εντολή chown ώστε να δώσει την κυριότητα των νέων φακέλων στον χρήστη USERNAME.

Απάντηση

#! /bin/bash

if [ $# -ne 4 ]; then
echo "Script needs a root folder parameter to run"
echo "Script needs a number paramater for the amount of db folders to run"
echo "Script needs a number parameter for the amount of datafolders to create"
echo "Script need a username parameter to run"
exit 1
fi

ROOTFOLDER=$1
no_of_DBFOLDERS=$2
no_of_DATAFOLDERS=$3
USERNAME=$4

if [ ! -d $ROOTFOLDER ]; then
echo "The rootfolder you have inputed does not exist"
exit 2
fi

usernameExists=$(grep -c ^"$USERNAME" /etc/passwd)

if [ $usernameExists -lt 1 ]; then
echo "The username you have inputed does not exist"
exit 3
fi

for (( i=1; i<=$no_of_DBFOLDERS; i++ ));
do
if [ ! -d $ROOTFOLDER/dbfolder$i ]; then
mkdir $ROOTFOLDER/dbfolder$i
fi
done

for (( i=1; i<=$no_of_DATAFOLDERS; i++ ));
do
if [ ! -d $ROOTFOLDER/datafolder$i ]; then
mkdir $ROOTFOLDER/datafolder$i
chown $USERNAME $ROOTFOLDER/datafolder$i
fi
done

Εξήγηση
Αρχικά ελέγχουμε το πλήθος των παραμέτρων που δόθηκαν. Αν δεν είναι 4 τότε τυπώνουμε τις κατάλληλες οδηγίες και τελειώνουμε το script.
Στην συνέχεια αποθηκευούμε τις παραμέτρους σε μεταβλητές.
Εκλεγχουμε αν ο root φάκελος υπάρχει και αν δεν υπάρχει τυπώνουμε τις απαραίτητες οδηγίες και τελειώνουμε το script.
Στην συνέχεια ελέγχουμε αν το username υπάρχει στην λίστα με τα usernames, κάνοντας grep με όρο να ξεκινάει από το username μια γραμμήσ το αρχείο /etc/passwd.
Αν το username δεν υπάρχει τότε τυπώνουμε τις απαραίτητες οδηγίες και τελειώνουμε το script.
Κάνουμε ένα loop για το πλήθος των db folders που έδωσε ο χρήστης και ελέγχουμε αν υπάρχει το αρχείο dbfolder# όπου # είναι ο αριθμός του Loop στο οποιό βρισκόμαστε. Αν δεν υπάρχει το δημιουργούμε.
Τέλος κάνουμε το ίδιο και για τα datafolders μόνο ότι αυτή την φορά αλλάζουμε και τον owner του file με την εντολή chown στο username που μας έδωσε ο χρήστης.


Άσκηση 3

Εκφώνηση

Να γραφτεί script με το όνομα cmpdir το οποίο να συγκρίνει τα περιεχόμενα δύο καταλόγων (τα ονόματα των οποίων θα δέχεται σαν ορίσματα, και θα ελέγχει αν είναι πράγματι κατάλογοι) ως προς τα αρχεία που περιέχουν. Ως αποτέλεσμα θα εμφανίζει αρχικά για κάθε κατάλογο ξεχωριστά, πόσα και ποια αρχεία του δεν περιέχονται στον άλλο κατάλογο και ποιο είναι το συνολικό μέγεθος αυτών. Στη συνέχεια θα εμφανίζει πόσα και ποια είναι τα κοινά αρχεία των δύο καταλόγων και το συνολικό μέγεθος αυτών. Τέλος, θα μετακινεί όλα τα κοινά αρχεία των δύο καταλόγων σε έναν τρίτο κατάλογο (ο οποίος θα δίνεται/ελέγχεται επίσης σαν όρισμα), και θα δημιουργεί στους δύο αρχικούς καταλόγους-ορίσματα κατάλληλα hard links προς αυτά.

Απάντηση

#! /bin/bash

if [ $# -ne 3 ]; then
echo "The script needs three directories as input to run"
exit 1
fi

directory1=$1
directory2=$2
directory3=$3

commonFiles=()
commonSize=0

if [ ! -d $directory1 ]; then
echo "The first input is not a directory"
exit 2
fi

if [ ! -d $directory2 ]; then
echo "The second input is not a directory"
exit 3
fi

if [ ! -d $directory3 ]; then
echo "The third input is not a directory"
exit 4
fi

for file1 in $directory1/*
do
if [ ! -f "$directory2/${file1##*/}" ]; then
echo "$file1 isn't in $directory2 and it's size is $(wc -c $file1 | cut -d " " -f 1)"
else
commonFiles+=(${file1##*/})
fileSize=$(wc -c $file1 | cut -d " " -f 1)
commonSize=$(($commonSize + $fileSize))
fi
done

for file2 in $directory2/*
do
if [ ! -f "$directory1/${file2##*/}" ]; then
echo "$file2 isn't in $directory1 and it's size is $(wc -c $file2 | cut -d " " -f 1)"
fi
done

echo "The common files between the two directories are: ${commonFiles[*]}"
echo "The size of the common files between the two directories is: $commonSize"

for file in ${commonFiles[@]}
do
mv $directory1/$file $directory3
rm $directory2/$file
ln $directory3/$file $directory1/link-$file
ln $directory3/$file $directory2/link-$file
echo "moved and make link for $file"
done

Εξήγηση
Πρώτα ελέγχουμε τον αριθμό των παραμέτρων και αν δεν είναι σωστός βγαίνουμε από το script.
Στην συνέχεια ελέγχουμε αν υπάρχουν οι τρεις φάκελοι που δώθηκαν συνεχίζει το πρόγραμμα αλλιώς εμφανίζει ποιός φάκελος δεν υπάρχει και τελείώνει το script.
Έπειτα κάνει ένα loop για τα αρχεία του φακέλου 1 και βλέπει αν υπάρχουν στον φάκελο 2. Όποια υπάρχουν τα βάζει σε ένα array και βρίσκει το μέγεθος τους και το προσθέτει στο σύνολο των μεγέθων τον κοινών αρχείων. Αν δεν είναι τυπώνει ότι δεν είναι και το μέγεθος του με την χρήση της εντολής wc -c και μετά κόβωντας μόνο το μέγεθος σε bytes.
Το ίδιο κάνουμε και για τον δεύτερο φάκελο αλλά δεν προσθέτουμε τα αρχεία στο array.
Τυπώνουμε τα κοινά αρχεία και το μέγεθος των κοινών αρχείων.
Τέλος κάνουμε ένα loop σε όλα τα κοινά αρχεία και τα μεταφέρουμε το τρίτο φάκελο που δόθηκε από τον χρήστη, επίσης τα αφαιρούμε από τον δεύτερο φάκελο. Δημιουργούμε hard links για τα αρχεία και τα μεταφέρουμε στους δύο φακέλους.


Άσκηση 4.1

Εκφώνηση

Γράψτε ένα script με όνομα bck το οποίο θα κρατά για έναν συγκεκριμένο χρήστη (το user name
του οποίου θα δίνεται ως πρώτο όρισμα) εφεδρικά αντίγραφα μιας περιοχής του λογαριασμού του
σε κάποια άλλη. Το script θα πρέπει να δέχεται ως δεύτερο όρισμα ένα κατάλογο (ή αρχείο), να
δημιουργεί ένα προς αποθήκευση αντίγραφο του ορίσματος (χρήση tar) και να το αντιγράφει
στον κατάλογο που ορίζει το τρίτο όρισμα. Αν ωστόσο το τρίτο όρισμα είναι αρχείο (και όχι
κατάλογος) τότε θα πρέπει απλά να προσθέτει (append) το προς αποθήκευση αντίγραφο στο
αρχείο αυτό. Κάντε τους απαραίτητους ελέγχους και για τα τρία ορίσματα (καθώς και για το
συνολικό αριθμό των ορισμάτων που δόθηκαν κατά την εκτέλεση).
Τροποποιήστε κατάλληλα το script bck (σε bck1) ώστε να πραγματοποιεί το ζητούμενο backup
προγραμματισμένα (χρήση at), σε μια συγκεκριμένη ώρα της επιλογής σας (προσπαθήστε να τη
δίνετε και αυτήν σαν όρισμα).
Τροποποιήστε κατάλληλα το script bck (σε bck2) ώστε να εκτελείται χωρίς ορίσματα και απλά
να λαμβάνει αντίγραφο του καταλόγου εργασίας σας στο /tmp, και προγραμματίστε (χρήση cron)
να τρέχει κάθε Κυριακή βράδυ στις 11μμ. για τους επόμενους έξι μήνες.

Απαντήσεις

#! /bin/bash

if [ $# -ne 3 ]; then
echo "You need to input a username for the script to run"
echo "You need to input a directory (or file) to be backed up up for the script to run"
echo "You need to input a target file or directory for the backup to be stored in for the script to run"
exit 1
fi

username=$1
source=$2
target=$3

usernameExists=$(grep -c ^"$username" /etc/passwd)

if [ $usernameExists -lt 1 ]; then
echo "The username you have inputed does not exist"
exit 2
fi

echo $source

if [ ! -d "/home/$username/$source" ] && [ ! -f "/home/$username/$source" ]; then
echo "The second parameter must be a file or a directory"
exit 3
fi

if [ -f $target ]; then
tar -rvf $target /home/$username/$source
else
if [ -d $target ]; then
tar -cvf backup2 /home/$username/$source
mv backup2 $target
else
echo "The third parameter must be a file or a directory"
exit 4
fi
fi

backupResult=$?

if [ $backupResult -ne 0 ]; then
echo "Could not create the backup"
exit 5
fi

echo "The creation of the backup was successful"

Εξήγηση

Πρώτα ελέγχουμε τον αριθμό των παραμέτρων και αν δεν είναι 4 τότε τυπώνουμε τις απαραίτητες οδηγίες και τερματίζουμε το script.
Στην συνέχεια αποθηκεύουμε τις παραμέτρους στις μεταβλητές και επίσης αποθηκεύουμε το αν υπάρχει το username.
στην συνέχεια ελεγχουμε αν υπάρχει και επιστρέφουμε το κατάλληλο μύνημα και αριθμό αν δεν υπάρχει.
Έπειτα ελέγχουμε αν υπάρχει το source σαν αρχείο η φάκελος.
Ελέγχουμε αν είναι αρχείο και αν είναι κάνουμε το backup του αρχείου και το κάνουμε append στο αρχείο που έδωσε ο χρήστης (με την χρήση του option r).
Αν είναι φάκελος τότε κάνουμε το ίδιο(χωρίς r αλλά με c για την δημιουργία νέου αρχειου) αλλά αυτή την φορά με όλοκληρο τον φάκελο ενώ επίσης μεταφέρουμε και το αρχείο του backup όταν γίνει.
Αν δεν είναι τίποτα από τα επιστρέφουμε την κατάλληλη τιμή και τον κατάλληλο αριθμό.
Τέλος ελέγχουμε τι μας έδωσε η προηγούμενη εντολή (η εντολή του backup) και αν δεν μας έβγαλε error επιστρέφουμε ότι θα γίνει το backup.

Άσκηση 4.2

#! /bin/bash

if [ $# -ne 4 ]; then
echo "You need to input a username for the script to run"
echo "You need to input a directory (or file) to be backed up up for the script to run"
echo "You need to input a target file or directory for the backup to be stored in for the script to run"
echo "You need to input a time of day for the backup to be created at, for the script to run (for example 3pm or 1am)"
exit 1
fi

username=$1
source=$2
target=$3
atTime=$4
usernameExists=$(grep -c ^"$username" /etc/passwd)

if [ $usernameExists -lt 1 ]; then
echo "The username you have inputed does not exist"
exit 2
fi

if [ ! -d "/home/$username/$source" ] && [ ! -f "/home/$username/$source" ]; then
echo "The second parameter must be a file or a directory"
exit 3
fi

if [ -f $target ]; then
at $atTime <<< "tar -rvf $target /home/$username/$source"
else
if [ -d $target ]; then
at $atTime <<ENDMARKER
tar -cvf backup2 /home/$username/$source
mv backup2 $target
ENDMARKER
else
echo "The third parameter must be a file or a directory"
exit 4
fi
fi

backupResult=$?

if [ $backupResult -ne 0 ]; then
echo "Could not create the backup"
exit 5
fi

echo "The creation of the backup was successful"

Εξήγηση
Πρώτα ελέγχουμε τον αριθμό των παραμέτρων και αν δεν είναι 4 τότε τυπώνουμε τις απαραίτητες οδηγίες και τερματίζουμε το script.
Στην συνέχεια αποθηκεύουμε τις παραμέτρους στις μεταβλητές και επίσης αποθηκεύουμε το αν υπάρχει το username.
στην συνέχεια ελεγχουμε αν υπάρχει και επιστρέφουμε το κατάλληλο μύνημα και αριθμό αν δεν υπάρχει.
Έπειτα ελέγχουμε αν υπάρχει το source σαν αρχείο η φάκελος.
Ελέγχουμε αν είναι αρχείο και αν είναι βάζουμε το at job (το backup του αρχείου) στην ώρα που μας έδωσε ο χρήστης.
Αν είναι φάκελος τότε κάνουμε το ίδιο αλλά αυτή την φορά με όλοκληρο τον φάκελο ενώ επίσης μεταφέρουμε και το αρχείο του backup όταν γίνει.
Αν δεν είναι τίποτα από τα επιστρέφουμε την κατάλληλη τιμή και τον κατάλληλο αριθμό.
Τέλος ελέγχουμε τι μας έδωσε η προηγούμενη εντολή (η εντολή του backup) και αν δεν μας έβγαλε error επιστρέφουμε ότι θα γίνει το backup.

Άσκηση 4.3

#! /bin/bash

command="tar -rvf /temp/backupFile $PWD"
cronJob="* 23 * * 0 $command"

(crontab -l | grep -v -F "$command" ; echo "$cronJob" ) | crontab -

at now +6 months <<ENDMARKER
( crontab -l | grep -v -F "$croncmd )" | crontab -
ENDMARKER

Εξήγηση
Πρώτα δημιουργούμε την εντολή που θέλουμε να εκτελεστει και το cronjob το οποίο θα χρησιμοποιηθεί (23 για την ώρα και 0 για την μέρα της εβδομάδας).
Στην συνέχεια ελέγχουμε αν υπάρχει ήδη το cronjob και αν δεν υπάρχει το προσθέτουμε
Τέλος βάζουμε ένα at job σε έξι μήνες από τώρα που θα αφαιρεί αυτό το crontab.


Άσκηση 5

Εκφώνηση

Γράψτε ένα script, με όνομα mfproc και δυνατότητα εισαγωγής 0, 1 ή 2 παραμέτρων ως εξής:
Όνομα
mfproc Εμφανίζει πληροφορίες για διεργασίες με την εξής μορφή:
Name PID PPID UID GID State
Συνοπτικά
mfproc [-u username] [-s S|R|Z]
-u username Ορίζει τον χρήστη του οποίου τις διεργασίες πρέπει να εμφανίσετε στο standard
output. Αν δεν δοθεί, θα εμφανίσετε όλες τις διεργασίες του ΛΣ
-s state Ορίζει την κατάσταση των διεργασιών που πρέπει να εμφανίσετε στο standard
output. Μπορεί να είναι οτιδήποτε μεταξύ των Running(R), Sleeping (S), Zombie
(Z). Αν δεν δοθεί, τότε θα εμφανίσετε όλες τις διεργασίες που βρίσκονται σε οποιαδήποτε από
τις τρεις καταστάσεις
Επιστρεφόμενη τιμή
0 Δεν υπήρξε λάθος
1 Δεν υπάρχει ο χρήστης
2 Δεν υπάρχει διεργασία σε αυτή την κατάσταση

Απάντηση

#! /bin/bash

usernameSet=false
stateSet=false

validUsername=false
validProcessState=()

while getopts :u:s: opt; do
case ${opt} in
u)
if [ ! -z "$OPTARG" ]; then
username=$OPTARG
usernameSet=true
fi
;;
s)
if [ ! -z "$OPTARG" ]; then
state=$OPTARG
stateSet=true
fi
;;
esac
done

if [ "$usernameSet" = true ]; then
userExists=`cat /etc/passwd | grep $username | wc -l`
if [ $userExists -ne 0 ]; then
validUsername=true
tasks=($(ps --no-headers -u $username | tr -s ' ' | cut -d ' ' -f 2))
else
tasks=($(ps --no-headers -eaf))
fi
else
tasks=($(ps --no-headers -eaf))
validUsername=true
fi

if [ ${#tasks[@]} -ne 0 ]; then
echo "Name PID PPID UID GID State"
fi
for i in "${tasks[@]}"
do
if [ -d "/proc/$i" ]; then
processState=$(sed -n '3 p' < /proc/$i/status | tr -s ' ' | cut -d $'\t' -f 2 | cut -d ' ' -f 1)
processName=$(sed -n '1 p' < /proc/$i/status | tr -s ' ' | cut -d $'\t' -f 2)
processPPID=$(sed -n '7 p' < /proc/$i/status | tr -s ' ' | cut -d $'\t' -f 2)
processUID=$(sed -n '9 p' < /proc/$i/status | tr -s ' ' | cut -d $'\t' -f 2)
processGID=$(sed -n '10 p' < /proc/$i/status | tr -s ' ' | cut -d $'\t' -f 2)

if [ "$stateSet" = true ]; then
if [ "$state" == "$processState" ]; then
echo "$processName $i $processPPID $processUID $processGID $processState"
validProcessState+=($i)
fi
else
echo "$processName $i $processPPID $processUID $processGID $processState"
fi
fi
done

if [ "$validUsername" = false ]; then
exit 1
fi

if [ "$stateSet" = true ] && [ ${#validProcessState[@]} -eq 0 ]; then
exit 2
fi

exit 0

Εξήγηση
Στις πρώτες δύο γραμμές θέτουμε μεταβλητές για το αν έχουν δωθεί τα parameters που θέλουμε.
Στο επόμενο while statement εισάγουμε ότι περιμένουμε δύο options στο script μας και βλέπουμε αν τα options που έχουν δωθεί είναι τα σωστά.
Αν είναι παίρνουμε την τιμή στην οποία αντιστοιχούν και την αποθηκεύουμε μέσα σε μία μεταβλητή. ΕΠίσης αλλάζουμε και τις δύο μεταβλητές που θέσαμε στην αρχή αν χρειαστεί.
Στην συνέχεια ελέγχουμε αν ο χρήστης έδωσε username ώς παράμετρο και έπειτα αν υπάρχει ο χρήστης αποοθηκεύουμε σε μία μεταβλητή τα processes που του αντιστοιχούν. Αν όχι τότε αποθηκεύουμε τα processes όλου του συστήματο.
Στην συνέχεια ελέγχουμε αν έχουμε processes και αν έχουμε τυπώνουμε τα headers για τα δεδομένα που θα τυπώσουμε παρακάτω.
Μετά για όλα τα processes ελέγχουμε αν υπάρχουν στον φάκελο με τα processes. Αν υπάρχουν τότε ανοίγουμε το αρχείο status και από αυτό διαβάζουμε τα δεδομένα που θέλουμε σε 5 μεταβλητές.
Για να το κάνουμε αυτό κάνουμε sed για να πάρουμε την γραμμή που θέλουμε από το αρχείο. έπειτα αν υπάρχουν πολλά space τα αφαιρούμε και τέλος κρατούμε μόνο την στήλη που θέλουμε με την χρήση της εντολής cut.
Ελέγχουμε αν ο χρήστης έχει δώσει state και αν έχει δώσει ότε ελέγχουμε αν το state που έχει δώσει ο χρήστης είναι ίδιο με το state του process και αν είναι το τυπώνουμε. Αν δεν έχει δωθεί state πό τον χρήστη τότε δεν κάνουμε τον προηγούμενο έλεγχο.
Τέλος ελεγχουμε αν το username υπήρχε και αν δώθηκε κάποιο state και επιστρέφουμε το κατάλληλο αριθμό.

